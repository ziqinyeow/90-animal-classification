import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { loadModel, predict } from "../lib/tf";

export default function Home() {
  const imageRef = useRef(null);
  const [image, setImage] = useState(null);
  const [imageurl, setImageurl] = useState(null);
  const [result, setResult] = useState(null);
  const [afterPredict, setAfterPredict] = useState(false);

  useEffect(() => {
    (async () => {
      await loadModel("/model/model.json");
    })();
  }, []);

  return (
    <div>
      <Head>
        <title>Animal Classification App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="layout">
        <div className="flex flex-col mb-10 md:items-end md:flex-row">
          <h2 className="mr-4">Animal Classification Model</h2>
          <h5 className="text-gray-400"> trained with EfficientNetB0</h5>
        </div>
        <input
          type="file"
          accept="image/*"
          id="file"
          onChange={async (e) => {
            // @ts-ignore
            let image = await e.target.files[0];
            let url;
            try {
              url = URL.createObjectURL(image);
              setImageurl(url);
            } catch (error) {}
            setImage(image);
          }}
          onClick={(event) => {
            event.target.value = null;
          }}
          hidden
        />
        <label
          htmlFor="file"
          className="flex flex-col items-center justify-center w-full p-6 mb-5 border-4 border-gray-600 border-dashed rounded-md cursor-pointer"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            width="48"
            height="48"
            className="mb-2 text-gray-600"
          >
            <path fill="none" d="M0 0h24v24H0z" />
            <path
              fill="currentColor"
              d="M17.409 19c-.776-2.399-2.277-3.885-4.266-5.602A10.954 10.954 0 0 1 20 11V3h1.008c.548 0 .992.445.992.993v16.014a1 1 0 0 1-.992.993H2.992A.993.993 0 0 1 2 20.007V3.993A1 1 0 0 1 2.992 3H6V1h2v4H4v7c5.22 0 9.662 2.462 11.313 7h2.096zM18 1v4h-8V3h6V1h2zm-1.5 9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"
            />
          </svg>
          <div>
            <h5 className="text-sm">
              <span className="font-semibold">Upload</span> image
            </h5>
          </div>
          {/* <h5 className="text-sm font-semibold">{image?.name}</h5> */}
        </label>
        {imageurl && (
          <div className="w-full p-10 border-2 border-gray-400 border-dashed rounded-md h-96">
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={imageurl}
              alt="image"
              className="object-contain w-full h-full"
              ref={imageRef}
            />
          </div>
        )}

        {result !== null && (
          <div className="w-full py-4 mt-10 font-bold text-center uppercase border border-green-300">
            {result}
          </div>
        )}
        <button
          onClick={() => {
            if (afterPredict) {
              setAfterPredict(false);
              setImage(null);
              setImageurl(null);
              setResult(null);
            } else {
              (async () => {
                const result = await predict(imageRef.current);
                setResult(result);
              })();
              setAfterPredict(true);
            }
          }}
          className="w-full px-6 py-4 mt-10 font-bold text-white bg-gray-700 border rounded-md hover:bg-black disabled:bg-gray-200"
          disabled={!imageurl}
        >
          {afterPredict ? "RESET" : "PREDICT"}
        </button>
      </div>
    </div>
  );
}
